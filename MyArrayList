package Lap_05;

import java.util.Arrays;

public class MyArrayList<E> {
    public static final int DEFAULT_CAPACITY = 10;
    private E[] elements;
    private int size;
    public MyArrayList() {
        this.elements = (E[]) new Object[DEFAULT_CAPACITY];
    }

    public MyArrayList(int capacity) {
        this.elements = (E[]) new Object[capacity];
    }
    public void growSize() {
        if(elements.length == size){
            int newLenght = elements.length * 2;
            E[] arr = (E[]) new Object[newLenght];
            for(int i = 0; i < elements.length; i++){
                arr[i] = elements[i]  ;
            }
            elements = arr;
        }
    }
    public int size() {
        return this.size;
    }
    public boolean isEmpty() {
        return this.size ==0;
    }
    public E get(int i) throws IndexOutOfBoundsException {
        return elements[i];
    }
    public E set(int i, E e) throws IndexOutOfBoundsException {
        this.elements[i] = e;
        return this.elements[i];
    }
    public boolean add(E e) {
        growSize();
        this.elements[size] = e;
        this.size++;
        return true;
    }
    public void add(int i, E e) throws IndexOutOfBoundsException {
        growSize();
        if(i<size){
            //size += 1;
            E tam = elements[i];
            this.elements[i] = e;
            for(int v = size ; v > i+1; v--){
                this.elements[v] = this.elements[v - 1];
            }
            this.elements[i+1] = tam;
            size++;
        }
    }
    public E remove(int i) throws IndexOutOfBoundsException {
        E tam = this.elements[i];
        this.size -= 1;
        for(int j = i; j < size; j++){
            this.elements[j] = this.elements[j+1];
        }
        this.elements[size] = null;
        return tam;
    }
    public void clear() {
        for(int i = 0; i< elements.length; i++){
            this.elements[i] = null;
        }
    }
    public int lastIndexOf(Object o) {
        int tam = -1;
        for(int i = 0; i < size; i++){
            if(this.elements[i] == o){
                tam = i;
            }
        }
        return tam;
    }
    public E[] toArray() {
        E[] arr = (E[]) new Object[size];
        for(int i = 0; i < size; i++){
            arr[i] =  elements[i];
        }
        elements = arr;
        return arr;
    }
    public MyArrayList<E> clone() {
        E[] shallowArr = (E[]) new Object[this.elements.length];
        shallowArr = elements ;
        return this.clone();
    }
    public boolean contains(E o) {
        for(int i = 0; i < this.elements.length; i++){
            if(this.elements[i] ==o)
                return true;
        }
        return false;
    }
    public int indexOf(E o) {
        for(int i = 0; i < this.elements.length; i++) {
            if (this.elements[i].equals(o) ) {
                return i;
            }
        }
        return -1;
    }
    public boolean remove(E e) {
        int i = indexOf(e);
        if(i != -1){
            remove(i);
            return true;
        }
        return false;
    }
}
